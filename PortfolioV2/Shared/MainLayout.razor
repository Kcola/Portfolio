@using PortfolioV2.Services
@inherits LayoutComponentBase
@inject State State
@inject UseJavascript JS
@inject IJSRuntime JSRuntime
@implements IDisposable
<main>
    @if (Dimensions == null)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="left-border">
            <ul>
                @for (var i = 0; i < TextBoarder(); i++)
                {
                    <li>~</li>
                }
            </ul>
        </div>
        <nav class="@($"{(State.NavOpen.Value ? "is-active" : "")}")">
            <Navbar Remount="@Remount"/>
        </nav>
        <button class="@($"hamburger hamburger--collapse {(State.NavOpen.Value ? "is-active" : "")}")"
                @onclick="@HandleClick">
            <span class="hamburger-box">
                <span class="hamburger-inner"></span>
            </span>
        </button>
        <div class="content">
            @Body
        </div>
        <div class="footer">
            <div>
                @if (Mount)
                {
                    <VimCommand Command="@($":{State.CurrentCommand.Command} {State.CurrentCommand.Args}")"/>
                }
            </div>
            <ul class="vim-text-info">
                <li>
                    2
                </li>
                <li>
                    6,15
                </li>
                <li>
                    All
                </li>
            </ul>
        </div>
    }
</main>

@code{
    private BrowserDimension Dimensions { get; set; }
    private bool Mount { get; set; } = false;

    private double TextBoarder()
    {
        var BaseFontSize = 16;
        var RelativeFontSize = 1.5;
        var FontToLi = 1.29411764706;
        if (Dimensions.Width < 768)
        {
            RelativeFontSize = 1.2;
        }
        return (Dimensions.Height / (BaseFontSize * RelativeFontSize * FontToLi)) - 5;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChanged;
        State.Reducer(new StateAction
        {
            Type = ActionType.ENTER_COMMAND,
            Payload = new State {CurrentCommand = new VimCommandLine(Commands.OpenFile, NavItems.Socials)}
        });
        await UseWidow();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("Dimensions", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable("UseWindow")]
    public async Task UseWidow()
    {
        Dimensions = await JS.GetDimensions();
        StateHasChanged();
    }

    private void HandleClick()
    {
        State.Reducer(new StateAction
        {
            Type = ActionType.TOGGLE_NAVBAR,
            Payload = new State {NavOpen = !State.NavOpen}
        });
    }

    void Remount()
    {
        Mount = false;
        StateHasChanged();
        Task.Delay(500).ContinueWith(t =>
        {
            Mount = true;
            StateHasChanged();
        });
    }

}