@using System.Text.Json
@using PortfolioV2.Services
@inject State State
@inject UseJavascript Js
@implements IDisposable
@inject NavigationManager NavigationManager
<style>
    @Css
</style>
<p class="typewriter">@Command</p>

@code {

    [Parameter]
    public string Command { get; set; }

    public string Css { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (State.CurrentCommand != null)
        {
            Command = $":{State.CurrentCommand.Command} {State.CurrentCommand.Args}";
            Css = $@"
.typewriter{{
overflow: hidden; /* Ensures the content is not revealed until the animation */
border-right: .15em solid white; /* The typwriter cursor */
white-space: nowrap; /* Keeps the content on a single line */
margin: 0 auto; /* Gives that scrolling effect as the typing happens */
letter-spacing: .15em; /* Adjust as needed */
animation:
typing {Command.Length / 8}s steps({Command.Length}, end),
blink-caret .75s step-end infinite;
}}

/* The typing effect */
@keyframes typing {{
from {{ width: 0 }}
to {{ width: 100% }}
}}

/* The typewriter cursor effect */
@keyframes blink-caret {{
from, to {{ border-color: transparent }}
50% {{ border-color: white; }}
}}
";
            State.OnChange += StateHasChanged;
            switch (State.CurrentCommand.Args)
            {
                case NavItems.Publications:
                    await Js.Redirect("https://arxiv.org/abs/1904.13231");
                    break;
                case NavItems.Contacts:
                    await Task.Delay((Command.Length / 8) * 1000 + 500).ContinueWith(t =>
                    {
                        NavigationManager.NavigateTo("Contact");
                        State.Reducer(new StateAction
                        {
                            Type = ActionType.CLEAR_COMMAND,
                        });
                    });
                    break;
                case NavItems.Projects:
                    await Task.Delay((Command.Length / 8) * 1000 + 500).ContinueWith(t =>
                    {
                        NavigationManager.NavigateTo("Projects");
                        State.Reducer(new StateAction
                        {
                            Type = ActionType.CLEAR_COMMAND,
                        });
                    });
                    break;
                case NavItems.Socials:
                    await Task.Delay((Command.Length / 8) * 1000 + 500).ContinueWith(t =>
                    {
                        NavigationManager.NavigateTo("Socials");
                        State.Reducer(new StateAction
                        {
                            Type = ActionType.CLEAR_COMMAND,
                        });
                    });
                    break;
                case NavItems.Github:
                    await Js.Redirect("https://github.com/kcola");
                    break;
                case NavItems.Home:
                    await Task.Delay((Command.Length / 8) * 1000 + 500).ContinueWith(t =>
                    {
                        NavigationManager.NavigateTo("/");
                        State.Reducer(new StateAction
                        {
                            Type = ActionType.CLEAR_COMMAND,
                        });
                    });
                    break;
            }
        }
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

}