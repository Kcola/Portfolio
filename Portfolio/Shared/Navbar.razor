@using Portfolio.Services
@using System.Text.Json
@implements IDisposable
@inject State State
@inject NavigationManager NavigationManager
@inject UseJavascript Js
<nav>
    <ul>
        <li @onclick="@GetNavBarItemEventHandler(NavItems.Home)" class="@(CurrentRoute == "/" ? "active" : "")">Home</li>
        <li @onclick="@(() => Js.Redirect("https://arxiv.org/abs/1904.13231"))">Publications</li>
        <li @onclick="@GetNavBarItemEventHandler(NavItems.Contacts)" class="@(CurrentRoute.ToLower().Contains("contact") ? "active" : "")">Contact</li>
        <li @onclick="@(() => Js.Redirect("https://github.com/kcola"))">Github</li>
    </ul>
</nav>
<div style="display: none">@CurrentRoute</div>

@code{

    [Parameter]
    public EventCallback Remount { get; set; }

    [Parameter]
    public string CurrentRoute { get; set; }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }


    public Action GetNavBarItemEventHandler(string navItem)
    {
        return () =>
        {
            State.Reducer(new StateAction
            {
                Type = ActionType.ENTER_COMMAND, Payload = new State
                {
                    CurrentCommand = new VimCommandLine(Commands.OpenFile, navItem),
                    NavOpen = false
                }
            });
            Remount.InvokeAsync();
        };
    }

}